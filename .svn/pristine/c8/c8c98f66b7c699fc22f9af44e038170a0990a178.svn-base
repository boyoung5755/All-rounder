/**
 * <pre>
 * 채팅 기능에서 사용하는 자바스크립트
 * 순수 자바스크립트 코드로 작성할 예정
 * </pre>
 * @author 박민주
 * @since 2023. 11. 12.
 * @version 1.0
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일        수정자       수정내용
 * --------     --------    ----------------------
 * 2023. 11. 18. 박민주		최초작성
 * 2023. 11. 19. 박민주     채팅방 목록 조회
 * 2023. 11. 19. 박민주     채팅방 개설
 * 2023. 11. 19. 박민주     채팅방 삭제
 * 2023. 11. 19. 박민주     채팅방 이름 수정
 * Copyright (c) 2023 by DDIT All right reserved
 * </pre>
 */

const initSelect2 = () =>  { //수산자 리스트에 사원의 이미지를 렌더링함 !
    receiversCd = $('#receiversCd'); //수신자를 선택하는 select 태그
    if (receiversCd.length) {
        function renderContactsAvatar(option) { //수신자 리스트에 사원의 이미지를 렌더링하는 함수
            if (!option.id) {
                return option.text;
            }
            var dataAvatar = $(option.element).data('avatar');
            let $avatar =
                "<div class='d-flex flex-wrap align-items-center'>" +
                "<div class='avatar avatar-xs me-2 w-px-20 h-px-20'>" +
                `<img src="/resources/assets/img/avatars/${dataAvatar}" alt='avatar' class='rounded-circle'/>` +
                '</div>' +
                option.text +
                '</div>';
            return $avatar;
        }
        receiversCd.wrap('<div class="position-relative"></div>').select2({ //위의 함수 랩핑, 호출
            placeholder: '선택',
            dropdownParent: receiversCd.parent(),
            closeOnSelect: false,
            templateResult: renderContactsAvatar,
            templateSelection: renderContactsAvatar,
            escapeMarkup: function (es) {
                return es;
            }
        });
    }
}


//페이지 로딩 후
document.addEventListener('DOMContentLoaded', function () {
    // 1. 페이지 로딩 직후, 전직원 정보를 직원검색모달에 미리 세팅, 로그인한 사원VO, 소속된 채팅방 정보 가져온다.
    let senderEmpCd = document.querySelector("#empCd").value; //로그인된 유저의 사번

    //메세지 전송버튼 클릭 시 전송할 JSON 데이터 (아래에서 더 추가될 예정)
    let sendData = {
        senderEmpCd: senderEmpCd
    };

    // 1-1. 로그인한 사원의 기본 정보 가져오는 ajax
    $.ajax({
        type: "GET",
        url: `/org/${senderEmpCd}`,
        data: JSON.stringify(senderEmpCd),
        dataType: "json",
        contentType: "application/json",
        success: function (resp) {
            //console.log("성공 ===> ", resp);
            //가져온 데이터를 JSON 객체(sendData)에 추가
            sendData.senderEmpName = resp.emp.empName; /* 이름 */
            sendData.senderDeptName = resp.emp.dept.deptName; /* 부서이름 */
            sendData.senderCommonCodeSj = resp.emp.common.commonCodeSj; /* 직급 */
            console.log("지금까지 생성된 JSON 데이터 ==> ", sendData);
        },
        error: function (xhr) {
            console.log("실패 ===> ", xhr);
        }
    });

    // 1-2. 소속된 채팅방 정보 가져오는 ajax
	const getChatList=()=>{
			$(function () { //
		        $.ajax({
		            type: "GET",
		            url: "messenger",
		            contentType: "application/json",
		            success: function (resp) {
		                console.log("로딩 된 후 사원의 채팅방 리스트 불러옴 ==> ", resp);
		                let listTag = `<li class="chat-contact-list-item chat-contact-list-item-title">
		                                    <h5 class="text-primary mb-0">Chats</h5>
		                                    <div id="addEmpBtn">
		                                        <i class='bx bx-plus bx-sm'></i>
		                                    </div>
		                              </li>`;
		                if(resp.length<=0) {
		                    listTag += "데이터 없음";
		                }else{
		                    for (var i = 0; i < resp.length; i++) {
		                        listTag += `
		                            <li class="chat-contact-list-item" data-value="${resp[i].chatRoomCd}"> 
		                                <div id="chatRoomDeleteBtn" data-value="${resp[i].chatRoomCd}">
		                                    <i class='bx bx-xs bxs-minus-circle'></i>
		                                </div>
		                                <a class="d-flex align-items-center">
		                                    <div class="flex-shrink-0 avatar avatar-online">
		                                        <img src="/resources/assets/img/avatars/13.png" alt="Avatar" class="rounded-circle" />
		                                    </div>
		                                    <div class="chat-contact-info flex-grow-1 ms-3">
		                                        <h6 class="chat-contact-name text-truncate m-0">${resp[i].chatRoomNm}</h6>
		                                        <p class="chat-contact-status text-truncate mb-0 text-muted">
		                                            최근 메시지 올 자리
		                                        </p>
		                                    </div> <small class="text-muted mb-auto">마지막 시간 올자리</small>
		                                    <div class="chat-contact-info flex-grow-1 ms-3">
		                                        <input type="button" value="이름변경" id="chatRoomTitleModiBtn">
		                                    </div>
		                                </a>
		                            </li>
		                        `;
		                    }
		                }
		                $("#chat-list").append(listTag);
		            },
		            error: function (xhr) {
		                console.log("Error: " + xhr);
		            }
		        })
		    });
	}
    getChatList();
    
    
    //1-3. 전직원 정보를 검색 모달에 미리 세팅해놓는다.
    $.ajax({
        type : "GET",
        url : "/org/list",
        contentType : "application/json",
        success : function(resp){
            console.log("resp==> ", resp)
            let respList = resp.list;
            //console.log(deptList);
            let tags = "";
            for (let i = 0; i < respList.length; i++) {
                if (respList[i].empName!="관리자" && respList[i].empCd != $("#empCd").val()) {
                    tags += `<option data-avatar="5.png" value="${respList[i].empCd}">[${respList[i].dept.deptName}]${respList[i].empName} ${respList[i].common.commonCodeSj}</option>`;
                }
            }
            initSelect2();
            $("#receiversCd").append(tags);
        },
        error : function(xhr){
            console.log("Error: " + xhr);
        }
    })

    //2. 채팅방 삭제
    $(document).on("click", "#chatRoomDeleteBtn", function() {
        let chatRoomCd = $(this).attr("data-value");
        Swal.fire({
            title: '정말 삭제하시겠습니까?',
            icon: 'warning',
            showCancelButton: true, // cancel버튼 보이기. 기본은 원래 없음
            confirmButtonColor: '#696cff', // confrim 버튼 색깔 지정
            cancelButtonColor: '#939393', // cancel 버튼 색깔 지정
            confirmButtonText: '삭제', // confirm 버튼 텍스트 지정
            cancelButtonText: '취소', // cancel 버튼 텍스트 지정
         }).then(result => {
            // 만약 Promise리턴을 받으면,
            if (result.isConfirmed) { // 만약 모달창에서 confirm 버튼을 눌렀다면
                $.ajax({
                type: "DELETE",
                url: `/messenger/${chatRoomCd}`,
                contentType: "application/json",
                success: function (resp) { //삭제
                    //브라우저 화면에서 삭제 (chatRoomCd 와 같은 value 를 가지고 있는 div를 remove)
                    Swal.fire('삭제되었습니다.', '', 'success');
					$("#chat-list").empty();
					getChatList();
                },
                error: function (xhr) {
                    console.log("삭제 실패 ====> ", xhr);
                }
                })
            }
         });
    });

    //3-1. 신규채팅방 개설을 위한 모달(1) 열기
    $(document).on("click", "#addEmpBtn", function() {
            //모달 열기
            $("#smallModal").removeClass("modal fade");
            $("#smallModal").addClass("modal fade show");
            $("#smallModal").attr("aria-modal", "true");
            $("#smallModal").attr("role", "dialog");
            $("#smallModal").css("display","block");
            $(".select2-selection__rendered").css("border-bottom", "1px solid #696cff");
            $(".modal-footer").css("justify-content","center");
    })
    //3-2. 신규채팅방 개설을 위한 모달(1) 닫기
    $(document).on("click", "#addCloseBtn", function() {
            //모달 닫기
            $("#smallModal").removeClass("modal fade show");
            $("#smallModal").addClass("modal fade");
            $("#smallModal").attr("aria-modal", "false");
            $("#smallModal").removeAttr("role");
            $("#smallModal").css("display","none");

    })

    //3-2. 신규채팅방 개설
    $("#makeChatBtn").on("click", function(){
        let selectedUsers = $("#receiversCd").val();
        $.ajax({
            type: "POST",
            url: "/messenger",
            data: JSON.stringify(selectedUsers),
            dataType: "json",
            contentType: "application/json",
            success: function (resp) {
                console.log("성공 ===> ", resp);
                //성공하면, alert 개설되었습니다.
                Swal.fire('채팅방이 개설되었습니다.', "",'success')
                .then(function(){
	
					$("#chat-list").empty();
					getChatList();
                })
            },
            error: function (xhr) {
                console.log("실패 ===> ", xhr);
            }
    	});
	});
 //================================================================여기까지 고침..2 (채팅방 모달 열고 닫을때, 삭제 되거나 개설 후에 리스트 초기화하기 !)


    // chatRoomCd = "";
    // chatContactListItems = [].slice.call(document.querySelectorAll('.chat-contact-list-item:not(.chat-contact-list-item-title)')); //title 아닌 li 태그

    // // Select chat or contact (채팅방 선택)
    // chatContactListItems.forEach(chatContactListItem => {
    //     // Bind click event to each chat contact list item
    //     chatContactListItem.addEventListener('click', e => {
    //         // Remove active class from chat contact list item
    //         chatRoomCd = chatContactListItem.getAttribute("data-value"); //위에 전역변수에 데이터 담아놓음
    //         document.getElementById("historyUl").replaceChildren(); //메시지 이력 영역 비우기

    //         var chatHistory = JSON.parse(localStorage.getItem(chatRoomCd)); //채팅이력 JSON으로.
    //         console.log("채팅이력 ==>", chatHistory);

    //         //채팅이력이 존재한다면 appned 없으면 말고~
    //         let liTags = "";
    //         if (chatHistory) { //채팅이력이 존재한다면
    //             for (var i = 0; i < chatHistory.length; i++) {
    //                 var startLiTags = "";
    //                 if (chatHistory[i].senderEmpCd == senderEmpCd) { //본인이면 오른쪽에 출력
    //                     startLiTags = '<li class="chat-message chat-message-right">';
    //                 } else { //아니면 왼쪽에 출력
    //                     startLiTags = '<li class="chat-message">';
    //                 }
    //                 liTags += `
    //                 ${ startLiTags }
    //                 <div class="d-flex overflow-hidden">
    //                     <div class="chat-message-wrapper flex-grow-1">
    //                         <div class="chat-message-text">
    //                             <p class="mb-0">${chatHistory[i].sendContent}</p>
    //                         </div>
    //                         <div class="text-end text-muted mt-1">
    //                             <i class="bx bx-check-double text-success"></i>
    //                             <small>${chatHistory[i].sendTime}</small>
    //                         </div>
    //                     </div>
    //                     <div class="user-avatar flex-shrink-0 ms-3">
    //                         <div class="avatar avatar-sm">
    //                             <img src="/resources/assets/img/avatars/1.png" alt="Avatar"
    //                                 class="rounded-circle" />
    //                         </div>
    //                     </div>
    //                 </div>
    //                 </li >
    //                     `;
    //             }
    //         } else { //채팅이력이 존재하지 않는다면
    //         }
    //         document.getElementById("historyUl").innerHTML = liTags;

    //         chatContactListItems.forEach(chatContactListItem => {
    //             chatContactListItem.classList.remove('active');
    //         });
    //         // Add active class to current chat contact list item
    //         e.currentTarget.classList.add('active');
    //     });
    // });

    

    //채팅방 이름 변경 버튼 클릭하여 모달 띄우고 닫기
    document.querySelectorAll(".chatRoomTitleModiBtn").forEach(btn => {
        btn.addEventListener("click", function () {
            const li = this.parentElement.closest('li');
            chatRoomCd = li.getAttribute("data-value");
            console.log("클릭한 chatRoomCd ===> ", chatRoomCd);

            const modal = document.querySelector("#modal");
            const clsBtn = document.querySelector("#clsBtn");


            btn.addEventListener("click", function () {
                modal.style.display = "block"; //모달 보이게
            });
            clsBtn.addEventListener("click", function () {
                modal.style.display = "none"; //모달 닫기
            });
        })
    });

    //채팅방 이름 변경
    const saveBtn = document.querySelector("#saveBtn");
    saveBtn.addEventListener("click", function () {
        var newTitle = document.querySelector("#newTitle").value;
        console.log("newTitle = ", newTitle);
        console.log("chatRoomCd = ", chatRoomCd);
        //위 두값을 ajax 로 넘겨서 수정해야함
        $.ajax({
            type: "PUT",
            url: `/ messenger / ${ chatRoomCd } `,
            data: newTitle,
            dataType: "json",
            contentType: "application/json",
            success: function (resp) {
                console.log("결과 ==>", resp);
                alert("변경되었습니다");
                location.reload();
            },
            error: function (xhr) {
                console.log("변경 실패 ====> ", xhr);
            }
        });
    });

    //채팅 메시지 전송
    const msgSendBtn = document.querySelector("#msgSendBtn");
    msgSendBtn.addEventListener("click", function (e) {


        var inputText = document.querySelector("#inputText");
        var text = inputText.value;
        text.innerHTML = ""; //입력란 초기화

        var currentDate = new Date();
        var formattedDate = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD
        var formattedTime = new Intl.DateTimeFormat('en-US', { hour: '2-digit', minute: '2-digit' }).format(currentDate);
        sendData.sendDate = formattedDate;
        sendData.sendTime = formattedTime;
        sendData.chatRoomCd = chatRoomCd;
        sendData.sendContent = text;

        // 기존 대화 가져오기
        var existingData = localStorage.getItem(chatRoomCd);
        console.log("existingData ---> ", existingData);
        var storageData = []; //데이터가 쌓일 배열
        if (existingData) { //기존데이터가 있다면
            storageData = JSON.parse(existingData);
        }
        storageData.push(sendData);

        console.log("보내기전 마지막 ! sendData ===> ", sendData);

        //1) local storage 에 저장
        localStorage.setItem(chatRoomCd, JSON.stringify(storageData));
        //2) 보내기
        webSocketChat.send(JSON.stringify(sendData));

    });

});
