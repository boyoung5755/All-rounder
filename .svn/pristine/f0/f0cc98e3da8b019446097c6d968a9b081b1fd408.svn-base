/**
 * 
 */

//예약버튼 onclick 이벤트
function fn_vReserve() {
	
	const reservation = {
		vhcleUseDate: $("#vhcleUseDate").val(),
		vhcleReservePur: $("#vhcleReservePur").val(),
		vhcleReserveEmpCd: $("#vhcleReserveEmpCd").val(),
		vhcleReservePw: $("#vhcleReservePw").val(),
		vhcleUseTimeCd : JSON.stringify($("#vhcleUseTimeCd").val()),
		vhcleCd :  $("#thisVhcleCd").val()
	};

	console.log("모달에 입력된 예약내용 ==> " + JSON.stringify(reservation));

	$.ajax({
		type: "POST",
		url: "/vehicle/reserve",
		data: JSON.stringify(reservation),
		dataType: "json",
		contentType: "application/json",
		success: function(resp) {
			console.log("성공입니당 ==> ", resp);
		},
		error: function(xhr) {
			console.log("실패유 ==> ", xhr);
		}
	})
}

//날짜 형식 변환1 : date 형식을 11/25 형식으로.
function formatDate(specificDate){
    // const year = specificDate.getFullYear();
    const month = String(specificDate.getMonth() + 1).padStart(2, '0');
    const day = String(specificDate.getDate()).padStart(2, '0');
    // return `${year}-${month}-${day}`;
    return `${month}/${day}`;
}

//날짜 형식 변환2 : date 형식을 2023-11-25 형식으로.
function formatDate2(specificDate){
	const year = specificDate.getFullYear();
	const month = String(specificDate.getMonth() + 1).padStart(2, '0');
	const day = String(specificDate.getDate()).padStart(2, '0');
	return `${year}-${month}-${day}`;
}

//시간표 날짜 세팅
function setDate(dateObj) {
	dateObj.startDate = dateObj.dateObj.toISOString().slice(0, 10); // startDate 업데이트
	dateObj.dateObj.setDate(dateObj.dateObj.getDate() + 4);
	dateObj.endDate = dateObj.dateObj.toISOString().slice(0, 10); // endDate 업데이트

	if (!dateObj.specificDate) { // 만약 specificDate가 없을 경우만 현재 날짜로 설정
		const now = new Date();
		const year = now.getFullYear();
		const month = String(now.getMonth() + 1).padStart(2, '0');
		const day = String(now.getDate()).padStart(2, '0');

		dateObj.specificDate = `${year}-${month}-${day}`;
	}
    
	var newDate = new Date(dateObj.specificDate); //기준이 되는 날짜

    dateObj.tuesdayDate = new Date(newDate);
    dateObj.tuesdayDate.setDate(newDate.getDate() + 1);
    
    dateObj.wednesdayDate = new Date(newDate);
    dateObj.wednesdayDate.setDate(newDate.getDate() + 2);
    
    dateObj.thursdayDate = new Date(newDate);
    dateObj.thursdayDate.setDate(newDate.getDate() + 3);

	var newDay = newDate.getDay();
	dateObj.dateObj = newDate;
	
	console.log("specific date 에 할당 후 dateObj ==> ", dateObj);

	switch (newDay) {
		case 0:
			console.log("sun");
			dateObj.dateObj.setDate(dateObj.dateObj.getDate() - 6);
			break;
		case 1:
			console.log("mon");
			break;
		case 2:
			console.log("tue");
			dateObj.dateObj.setDate(dateObj.dateObj.getDate() - 1);
			break;
		case 3:
			console.log("wed");
			dateObj.dateObj.setDate(dateObj.dateObj.getDate() - 2);
			break;
		case 4:
			console.log("thu");
			dateObj.dateObj.setDate(dateObj.dateObj.getDate() - 3);
			break;
		case 5:
			console.log("fri");
			dateObj.dateObj.setDate(dateObj.dateObj.getDate() - 4);
			break;
		case 6:
			console.log("sat");
			dateObj.dateObj.setDate(dateObj.dateObj.getDate() - 5);
			break;
	}

	dateObj.startDate = dateObj.dateObj.toISOString().slice(0, 10);
	dateObj.dateObj.setDate(dateObj.dateObj.getDate() + 4);
	dateObj.endDate = dateObj.dateObj.toISOString().slice(0, 10);

	// console.log("dateObj.specificDate :" + dateObj.specificDate);
	// console.log("dateObj.startDate :" + dateObj.startDate);
	// console.log("dateObj.dateObj: " + dateObj.dateObj);
	// console.log("dateObj.endDate : ", dateObj.endDate);

    monTag = `(${formatDate(new Date(dateObj.startDate))})<br>MON`;
    tueTag = `(${formatDate(new Date(dateObj.tuesdayDate))})<br>TUE`;
    wedTag = `(${formatDate(new Date(dateObj.wednesdayDate))})<br>WED`;
    thuTag = `(${formatDate(new Date(dateObj.thursdayDate))})<br>THU`;
    friTag = `(${formatDate(new Date(dateObj.endDate))})<br>FRI`;

	//시간표 상의 날짜 입력 (11/25) 형식
    $(".mon").html(monTag);
    $(".tue").html(tueTag);
    $(".wed").html(wedTag);
    $(".thu").html(thuTag);
    $(".fri").html(friTag);

	//속성값으로 실제 사용가능한 형식의 날짜 데이터
	$(".mon").attr('data-realDate', formatDate2(new Date(dateObj.startDate)));
	$(".tue").attr('data-realDate', formatDate2(new Date(dateObj.tuesdayDate)));
	$(".wed").attr('data-realDate', formatDate2(new Date(dateObj.wednesdayDate)));
	$(".thu").attr('data-realDate', formatDate2(new Date(dateObj.thursdayDate)));
	$(".fri").attr('data-realDate', formatDate2(new Date(dateObj.endDate)));

	$("#startDate").text(dateObj.startDate);
	$("#endDate").text(dateObj.endDate);
}

//랜덤색상 만들기
function makeRndColor(){
    const letters = '89ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * letters.length)]; // letters 배열의 길이를 기준으로 랜덤 인덱스 생성
    }
    return color;
}

//예약 시간표 출력//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function setTimeTable(resp){
    if(resp.resultList.length > 0){ //예약 내역이 존재하는 경우만
        //날짜 얻어서 월~금 따져서
        //월요일이면서 1이면 어디칸에 넣고,~~
        for(var i=0; i<resp.resultList.length; i++){
            console.log("날짜 출력.... ==> ", resp.resultList[i].vhcleUseDate);
            //내용출력 위치를 위한 변수들
            var thisDate = resp.resultList[i].vhcleUseDate; //날짜
            var thisDay = new Date(thisDate).getDay();

			var thisTimeCds = JSON.parse(thisTimeCd);
			console.log("배열? ==> ", thisTimeCds);
			console.log("배열? ==> ", thisTimeCds.length);

			for(var i=0; i<thisTimeCds.length; i++){
				if(thisTimeCds[i]=="R_V1"){
					thisTime = "09:00-13:00"
				}else{
					thisTime = "14:00-18:00"
				}
			}

            var thisTime = "";
            if(thisTimeCd=="R_V1"){
                thisTime = "09:00-13:00"
            }else{
                thisTime = "14:00-18:00"
            }

            // console.log(resp.resultList[i]);

            //내용을 위한 변수들
            var vhcleReserveEmpDeptNm = resp.resultList[i].vhcleReserveEmpDeptNm; //부서
            var vhcleReserveEmpRankNm = resp.resultList[i].vhcleReserveEmpRankNm; //직급
            var vhcleReserveEmpNm = resp.resultList[i].vhcleReserveEmpNm; //이름
            var vhcleReservePur = resp.resultList[i].vhcleReservePur; //사용 목적
            var vhcleReserveEmpProfileImg = resp.resultList[i].vhcleReserveEmpProfileImg; //프로필이미지

            if(!vhcleReserveEmpProfileImg){
                vhcleReserveEmpProfileImg = "/resources/assets/img/avatars/5.png";
            }

            var divTag = `
            <div style="white-space: nowrap;">
                <div style="display: inline-block;">
                    <div>${thisDate}</div>
                    <div>${thisTime}</div>
                    <div>[${vhcleReserveEmpDeptNm}|${vhcleReserveEmpRankNm}] ${vhcleReserveEmpNm} <img width="32px" height="32px" src="${vhcleReserveEmpProfileImg}" class="rounded-circle"/></div>
                    <div>${vhcleReservePur}</div>
                </div>
            </div>
            `;
            console.log(divTag);
            $(`.${thisDay}.${thisTimeCd}`).append(divTag);
        }
    }
}

function setTimeTableColor(thisDay, thisTimeCd){
	var rndColor = makeRndColor();
	// console.log(makeRndColor);
	$(`.${thisDay}.${thisTimeCd}`).css("background", `${rndColor}70`);
	$(`.${thisDay}.${thisTimeCd}`).removeClass("clickable");
}
/*
//차량 코드를 통해서 VehicleVO 얻기
function(vhcleCd){
	$.ajax({
		type:"GET",
		url:`/vehicle/oneVehicleInfo/${vhcleCd}`,
		contentType: "application/json;charset=utf-8",
		success : function(resp){
			console.log("가져온 결과 ---> " + resp.vehicle);
			return resp.vehicle;
		},
		error: function(xhr){
			console.log("오류 ==> " + xhr);
		}
	})
}
*/
function getVehicleInfo(vhcleCd, callback) {
    $.ajax({
        type: "GET",
        url: `/vehicle/oneVehicleInfo/${vhcleCd}`,
        contentType: "application/json;charset=utf-8",
        success: function(resp) {
            console.log("가져온 결과 ---> " + resp.vehicle);
            callback(resp.vehicle); // 데이터를 콜백 함수로 전달
        },
        error: function(xhr) {
            console.log("오류 ==> " + xhr);
        }
    });
}


$(function() {
	$('#vhcleUseTimeCd').prop('size', 1);
	$(".status-flag").each(function() {
		if (this.id == 'using') {
			$(this).parents('.oneBox').css('background-color', '#ffcc4e');
		}else if(this.id=='stopUsing'){
			$(this).parents('.oneBox').css('background-color', '#f48068');
		}else{
			$(this).parents('.oneBox').css('background-color', '#d4f0f0');
		}
	});

/*
	$(".status-flag#using").each(function() {
		$(this).parent(".oneBox").css("background-color", "#eccd85");
	});
	$(".status-flag#stopUsing").each(function() {
		$(this).parent(".oneBox").css("background-color", "#f48068");
	});
	$(".status-flag#available").each(function() {
		$(this).parent(".oneBox").css("background-color", "#ced986");
	});*/

	const dateInfo = {
		specificDate: "",
		vhcleCd: "", // 이건 첫 번째 차?
		startDate: "",
        tuesdayDate : "",
        wednesdayDate :  "",
        thursdayDate : "",
		endDate: "",
		dateObj: new Date()
	};

	setDate(dateInfo);
	// console.log("dateInfo==> " + dateInfo.startDate);
	// console.log("dateInfo==> " + dateInfo.endDate);

	$(".vehicleOne").on("click", function() {
		$(".oneBox")
			.css("transition", "")
			.css("box-shadow", "");

		$(this).find('.oneBox')
			.css("transition", "0.9s ease-in-out")
			.css("box-shadow", "0px 0px 10px #696cff");

        $(".timetable").each(function() {
            if (!$(this).hasClass('clickable')) {
                $(this).addClass('clickable');
            }
        });
        $(".timetable").css("background", ""); // 백그라운드 색상 제거
        $(".timetable").empty(); // 내용 비우기

		dateInfo.vhcleCd = $(this).data('vhclecd'); // 데이터 속성 가져오기
		var vhcleCd = dateInfo.vhcleCd;
		var startDate = dateInfo.startDate;
		var endDate = dateInfo.endDate;

		//해당 vhcleCd 을 통해서 예약 내역 확인가져오기!
		$.ajax({
			type: "GET",
			url: `/vehicle/oneVehicleReservation/${vhcleCd}`,
			data: {
				startDate: startDate,
				endDate: endDate
			},
			contentType: "application/json",
			success: function(resp) {
				console.log("성공 ==> ", resp);
                setTimeTable(resp);

			},
			error: function(xhr) {
				console.log("실패 ==> ", xhr);
			}
		})
		console.log("vhcleCd = " + vhcleCd);
	});

	//일주일 전으로 startDate & endDate 설정
	$("#beforeIcon").on("click", function() {
       $(".timetable").each(function() {
            if (!$(this).hasClass('clickable')) {
                $(this).addClass('clickable');
            }
        });
        $(".timetable").css("background", ""); // 백그라운드 색상 제거
        $(".timetable").empty(); // 내용 비우기

		// console.log("인포 == > ", dateInfo);
		const sevenDaysAgo = new Date(dateInfo.specificDate); // 현재 specificDate를 기준으로 하여 새로운 Date 객체 생성
		sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7); // 7일 전으로 설정

		dateInfo.specificDate = sevenDaysAgo.toISOString().slice(0, 10); // specificDate 업데이트
		
		setDate(dateInfo); // setDate 함수 호출하여 날짜 설정

		var vhcleCd = dateInfo.vhcleCd;
		$.ajax({
			type: "GET",
			url: `/vehicle/oneVehicleReservation/${vhcleCd}`,
			data: {
				startDate: dateInfo.startDate,
				endDate: dateInfo.endDate
			},
			contentType: "application/json",
			success: function(resp) {
				console.log(resp);
                setTimeTable(resp);
			},
			error: function(xhr) {
				console.log(xhr);
			}
		});
	});
	
	//일주일 후 startDate & endDate 설정
	$("#afterIcon").on("click", function() {
        $(".timetable").each(function() {
            if (!$(this).hasClass('clickable')) {
                $(this).addClass('clickable');
            }
        });
        $(".timetable").css("background", ""); // 백그라운드 색상 제거
        $(".timetable").empty(); // 내용 비우기
        
		// console.log("인포 == > ", dateInfo);
		const sevenDaysAgo = new Date(dateInfo.specificDate); // 현재 specificDate를 기준으로 하여 새로운 Date 객체 생성
		sevenDaysAgo.setDate(sevenDaysAgo.getDate() + 7); // 7일 전으로 설정
	
		dateInfo.specificDate = sevenDaysAgo.toISOString().slice(0, 10); // specificDate 업데이트

		setDate(dateInfo); // setDate 함수 호출하여 날짜 설정
		
		var vhcleCd = dateInfo.vhcleCd;
		$.ajax({
			type: "GET",
			url: `/vehicle/oneVehicleReservation/${vhcleCd}`,
			data: {
				startDate: dateInfo.startDate,
				endDate: dateInfo.endDate
			},
			contentType: "application/json",
			success: function(resp) {
				console.log(resp);
                setTimeTable(resp);
			},
			error: function(xhr) {
				console.log(xhr);
			}
		});
	});
	
	
	$("#vhcleUseDate").datepicker({
		format: "yyyy-mm-dd",	//데이터 포맷 형식(yyyy : 년 mm : 월 dd : 일 )
		startDate: '-10d',	//달력에서 선택 할 수 있는 가장 빠른 날짜. 이전으로는 선택 불가능 ( d : 일 m : 달 y : 년 w : 주)
		endDate: '+10d',	//달력에서 선택 할 수 있는 가장 느린 날짜. 이후로 선택 불가 ( d : 일 m : 달 y : 년 w : 주)
		autoclose: true,	//사용자가 날짜를 클릭하면 자동 캘린더가 닫히는 옵션
		calendarWeeks: false, //캘린더 옆에 몇 주차인지 보여주는 옵션 기본값 false 보여주려면 true
		clearBtn: false, //날짜 선택한 값 초기화 해주는 버튼 보여주는 옵션 기본값 false 보여주려면 true
		datesDisabled: ['2019-06-24', '2019-06-26'],//선택 불가능한 일 설정 하는 배열 위에 있는 format 과 형식이 같아야함.
		daysOfWeekDisabled: [0, 6],	//선택 불가능한 요일 설정 0 : 일요일 ~ 6 : 토요일
		daysOfWeekHighlighted: [3], //강조 되어야 하는 요일 설정
		// disableTouchKeyboard : false,	//모바일에서 플러그인 작동 여부 기본값 false 가 작동 true가 작동 안함.
		immediateUpdates: false,	//사용자가 보는 화면으로 바로바로 날짜를 변경할지 여부 기본값 :false 
		multidate: false, //여러 날짜 선택할 수 있게 하는 옵션 기본값 :false 
		multidateSeparator: ",", //여러 날짜를 선택했을 때 사이에 나타나는 글짜 2019-05-01,2019-06-01
		templates: {
			leftArrow: '&laquo;',
			rightArrow: '&raquo;'
		}, //다음달 이전달로 넘어가는 화살표 모양 커스텀 마이징 
		showWeekDays: true,// 위에 요일 보여주는 옵션 기본값 : true
		title: "사용일자",	//캘린더 상단에 보여주는 타이틀
		todayHighlight: true,	//오늘 날짜에 하이라이팅 기능 기본값 :false 
		toggleActive: true,	//이미 선택된 날짜 선택하면 기본값 : false인경우 그대로 유지 true인 경우 날짜 삭제
		weekStart: 0,//달력 시작 요일 선택하는 것 기본값은 0인 일요일 
		language: "ko"	//달력의 언어 선택, 그에 맞는 js로 교체해줘야한다.
	}); //datepicker end

	$("#vhcleReserveEmpCd").on("keyup", function() {
		var searchEmpCd = $(this).val();
		console.log(searchEmpCd + "==> 나중에 여기서 사번 입력했을 때 자동으로 사원 정보 나오게");
	});

    $(".clickable").on("click", function(event){ //clickable 없어도 왜?
		if (dateInfo.vhcleCd !== null && dateInfo.vhcleCd.trim() !== "") {
			var timeCd = "";
			var timeCdTime ="";
			if($(this).hasClass('R_V1')){
				timeCd = 'R_V1';
			}else{
				timeCd = 'R_V2';
			}

			var tdIndex = $(this).index();
			var tr = $(this).closest('tr');
			var thOfClickedTD = tr.closest('table').find('thead th').eq(tdIndex);
			var realDateValue = thOfClickedTD.data('realdate');
			
			//넘겨야하는 데이터 : 날짜, 시간, 차량코드
			console.log("차량번호 ==> ", dateInfo.vhcleCd);
			console.log('시간코드~ ==> ' + timeCd);
			console.log('해당하는 요일의 data-realdate 값:', realDateValue);
		
			$("#vhcleReserveEmpCd").val($("#empCd").val());

			$("#vhcleUseDate").val(realDateValue);
			$("#vhcleUseTimeCd").val(timeCd);

			

			$('#backDropModal').modal('show');

			getVehicleInfo(dateInfo.vhcleCd, function(vehicleData) {
				console.log('받아온 차량 데이터:', vehicleData);
				//모델명, 차량번호, n인승, 이미지

				var vModelText=`${vehicleData.vhcleModel}(${vehicleData.vhcleCapacity}인승)`;
				$("#vModel").text(vModelText);
				$("#vNo").text(vehicleData.vhcleNo);
				$("#modalImg").attr("src", vehicleData.vhcleImg);

				$("#thisVhcleCd").val(vehicleData.vhcleCd);
			});
		} else {
			Swal.fire('차량을 먼저 선택해주세요.', '', 'error');
		}
	})

}); //ready end

