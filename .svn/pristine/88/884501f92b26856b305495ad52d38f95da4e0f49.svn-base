<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  [[개정이력(Modification Information)]]       -->
<!--  수정일        수정자     수정내용               -->
<!--  ==========   ======    ==============        -->
<!--  2023. 11. 6.     박민주     최초작성               -->
<!--  2023. 11. 18.     박민주     채팅방 목록 출력 쿼리문 추가   -->
<!--  2023. 11. 18.     박민주     신규 채팅방 개설 쿼리문 추가   -->
<!--  2023. 11. 18.     박민주     채팅방 삭제 쿼리문 추가   -->
<!--  2023. 11. 18.     박민주     채팅방 수정 쿼리문 추가   -->
<!--  Copyright (c) 2023 by DDIT All right reserved -->

<mapper namespace="kr.or.ddit.messenger.dao.MessengerDAO">

	<resultMap type="ChatParticipantVO" id="chatParticipantMap" autoMapping="true">
		<association property="employee" javaType="EmployeeVO" autoMapping="true">
			<id property="empCd" column="EMP_CD" />
			<association property="common" autoMapping="true" />
			<association property="dept" autoMapping="true"/>
		</association>
	</resultMap>

	<select id="selectChatList" parameterType="String" resultMap="chatParticipantMap">
		SELECT
					P.CHAT_EMP_CD
					,P.CHAT_ROOM_CD
					,P.CHAT_ROOM_NM
		            ,E.EMP_NAME
		            ,E.EMP_RANK
		            ,E.DEPT_CD
		            ,E.EMP_MAIL
		            ,E.EMP_POSITION
		            ,E.EMP_EMAIL_SECOND
		            ,C.COMMON_CODE_SJ
		            ,D.DEPT_NAME
				FROM
					CHAT_PARTICIPANT P
		            	INNER JOIN EMPLOYEE E ON P.CHAT_EMP_CD = E.EMP_CD
						INNER JOIN COMMON_CODE C ON E.EMP_RANK=C.COMMON_CODE_CD
						INNER JOIN DEPT D ON E.DEPT_CD=D.DEPT_CD
				WHERE
					CHAT_EMP_CD = #{chatEmpCd}
	</select>
	
	<select id="retrieveChatParticipantOne" parameterType="ChatParticipantVO" resultType="ChatParticipantVO">
		SELECT
			CHAT_ROOM_CD,
			CHAT_ROOM_NM,
			CHAT_EMP_CD
		FROM
			CHAT_PARTICIPANT
		WHERE
			CHAT_ROOM_CD=#{chatRoomCd}
			AND CHAT_EMP_CD=#{chatEmpCd}
	</select>

	<select id="selectNewChatSeq" resultType="String">
			SELECT
			TO_CHAR(SYSDATE,'YYMMDD')||TO_CHAR(CHATROOM_SEQ.NEXTVAL,'FM0000') AS CHAT_ROOM_CD
			from dual
	</select>
	
	<!-- 신규 채팅방 개설 시, 채팅방 참여자 테이블에 INSERT -->
	<insert id="insertChatParticipant" parameterType="ChatParticipantVO">
		INSERT INTO CHAT_PARTICIPANT (
			CHAT_EMP_CD
			,CHAT_ROOM_CD
			,CHAT_ROOM_NM
			)
		VALUES (
			#{chatEmpCd,jdbcType=VARCHAR}
			,#{chatRoomCd,jdbcType=VARCHAR}
			,#{chatRoomNm,jdbcType=VARCHAR}
					)
	</insert>
	
	<delete id="deleteChatRoom" parameterType="ChatParticipantVO">
		DELETE 
			FROM CHAT_PARTICIPANT
		WHERE
	        CHAT_EMP_CD = #{chatEmpCd}
	   	 AND CHAT_ROOM_CD = #{chatRoomCd}
	</delete>
	
	<update id="updateChatRoom" parameterType="ChatParticipantVO">
		UPDATE CHAT_PARTICIPANT
		SET
		    CHAT_ROOM_NM = #{chatRoomNm}
		WHERE
		        chat_emp_cd = #{chatEmpCd}
		    AND chat_room_cd = #{chatRoomCd}
	</update>
	
	<!-- 채팅방별 참여자 조회 쿼리 (11.22 추가) -->
	<select id="selectChatRoomParties" parameterType="String" resultType="ChatParticipantVO">
		SELECT 
			P.CHAT_EMP_CD 
    		,E.EMP_NAME
    		,E.EMP_RANK
			,E.DEPT_CD
			,E.EMP_MAIL
			,E.EMP_POSITION
			,E.EMP_EMAIL_SECOND
			,C.COMMON_CODE_SJ
			,D.DEPT_NAME
	    FROM
	    	CHAT_PARTICIPANT P
	        	INNER JOIN EMPLOYEE 
	        		E ON P.CHAT_EMP_CD = E.EMP_CD
				INNER JOIN COMMON_CODE 
					C ON E.EMP_RANK=C.COMMON_CODE_CD
				INNER JOIN 
					DEPT D ON E.DEPT_CD=D.DEPT_CD
	    WHERE CHAT_ROOM_CD= #{chatRoomCd} 
	</select>
	
</mapper>
