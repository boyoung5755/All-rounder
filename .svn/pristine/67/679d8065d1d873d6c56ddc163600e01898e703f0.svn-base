<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>  
<%@taglib uri="http://www.springframework.org/security/tags" prefix="sec" %>
 <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>

<script>
	$(function(){
		let loginEmpCd = $("#empCd").val();
		

	    const COpen = ()=>{
	        console.log("[채팅] 접속 성공!!!!!!!");
	        // 서버로 메세지 보내기
	    }
	    
	    // message이벤트가 발생했을 때 실행되는 함수
	    const CMsg = ()=>{
	    	//여기서 처리하기!
	        console.log("[채팅] 서버에서 온 메세지", event.data); //서버가 보낸 내용은 event.data에 담겨넘어옴 //여기서 화면에 뿌려주기
	        const receivedData = JSON.parse(event.data);
	        console.log("JSON 객체로 다시 파싱 ==> ", receivedData);
	        
	        let chatRoomCd = receivedData.chatRoomCd;

	        console.log("로그인계정 사번 : ", loginEmpCd, "//발신자 사번 : ", receivedData.senderEmpCd, "//채팅방번호 : "+ chatRoomCd);
	        
			//기존 대화 가져오기
	        var storageData = []; //데이터가 쌓일 배열
	        let existingData = localStorage.getItem(chatRoomCd);
	        if (existingData) { //기존데이터가 있다면
	            storageData = JSON.parse(existingData);
	        }
	        console.log(storageData);
	        storageData.push(receivedData);
	   		localStorage.setItem(chatRoomCd, JSON.stringify(storageData));
			
	        let startLiTags = "";
	        let cssStyle = "";
	        if (receivedData.senderEmpCd == loginEmpCd) { //본인이면 오른쪽에 출력
	            startLiTags = '<li class="chat-message chat-message-right">';
	            cssStyle = "style='color:white;'"; 
	        } else { //아니면 왼쪽에 출력
	            startLiTags = '<li class="chat-message">';
	            cssStyle = "style='color:grey;'"; 
	        }
	        
	        let formatDate ="";
	        if(!compareToToday(receivedData.sendTime)){
	        	formatDate = `\${receivedData.sendTime}`;
	        }else{
	        	formatDate = `\${receivedData.sendDate}`;
	        }
	        
	        let liTags = `
	                    \${startLiTags}
	                        <div class="d-flex overflow-hidden">
	                            <div class="chat-message-wrapper flex-grow-1">
	                                <div class="chat-message-text">
	                                    <p class="mb-0" \${cssStyle}>\${receivedData.sendContent}</p>
	                                </div>
	                                <div class="text-end text-muted mt-1">
	                                    <i class="bx bx-check-double text-success"></i> 
	                                    <small>\${formatDate}</small>
	                                </div>
	                            </div>
	                            <div class="user-avatar flex-shrink-0 ms-3">
	                                <div class="avatar avatar-sm">
	                                    <img src="/resources/assets/img/avatars/1.png" alt="Avatar"
	                                        class="rounded-circle" />
	                                </div>
	                            </div>
	                        </div>
	                    </li>
	                    `;
	                    
	   		$("#historyUl").append(liTags);
	   		
	        console.log(liTags);
	    }
	    

	    webSocket.onopen = fOpen;
	    webSocket.onmessage = fMsg;
	    
	    webSocketChat.onopen = COpen;
	    webSocketChat.onmessage = CMsg;
		
		
	})
    let webSocket = new WebSocket("ws://localhost/alarm");
	let webSocketChat = new WebSocket("ws://localhost/chat");
    
    const fOpen = ()=>{
        console.log(" 접속 성공!!!!!!!");
        // 서버로 메세지 보내기
    }
    // message이벤트가 발생했을 때 실행되는 함수
    const fMsg = ()=>{
        console.log("서버에서 온 메세지",event.data); //서버가 보낸 내용은 event.data에 담겨넘어옴
    };

</script>


 <!-- Navbar -->
<nav class="navbar navbar-expand-lg bg-primary">
	<sec:authorize access="isAuthenticated()">
		<sec:authentication property="principal" var="realUser"/>
	</sec:authorize>
	<input type="text" id="empCd" value="${realUser.username}" />
	
  <div class="container-fluid">
    <a class="navbar-brand" href="javascript:void(0)"></a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbar-ex-7">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbar-ex-7">

      <ul class="navbar-nav ms-lg-auto">
      	<li class="nav-item">
      		<a class="nav-link" href="javascript:void(0);" onclick="openPopup();"><i class="bx bx-food-menu fs-4"></i> Org</a>
      	</li>
        <li class="nav-item">
          <a class="nav-link" href="/mypage"><i class="tf-icons navbar-icon bx bx-user"></i> Profile</a>
        </li> 
        <!-- 실시간 알림 구현예정 -->
        <li class="nav-item">
          <a class="nav-link" href="javascript:void(0);"><i class="tf-icons bx bx-xs bx-bell">
          <span class="badge rounded-pill bg-danger text-white badge-notifications">5</span></i> Alarm</a>
        </li>
        <li class="nav-item" >
          <a class="nav-link" id="logoutUI" href="javascript:;"><i class="tf-icons navbar-icon bx bx-lock-open-alt"></i> Logout</a>
        </li>
      </ul>
    </div>
  </div>
</nav>



<form:form action="/logout" id="logoutForm" method="POST">
	<input type="hidden" value="로그아웃">
</form:form>
    
<script type="text/javascript">
	$("#logoutUI").on("click", function(event) {
		$(logoutForm).submit();
	});

	const compareToToday = (dateData) => {
		let today = new Date();
		let year = today.getFullYear();
		let month = String(today.getMonth() + 1).padStart(2, '0');
	    let day = String(today.getDate()).padStart(2, '0');
	    let formattedToday = `\${year}-\${month}-\${day}`;
	    
	    if(dateData==formattedToday){
	    	return true;
	    }else{
	    	return false;
	    }
	}
	
	function openPopup() {

		// 열려는 페이지의 URL
		var url = "/org/organization/pop";

		// 팝업 창 열기
		var popup = window.open(url, '조직도', 'width=600,height=800, left=700, top=220');


	}
</script>


          



