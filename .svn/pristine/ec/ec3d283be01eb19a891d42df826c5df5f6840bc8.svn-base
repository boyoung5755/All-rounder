package kr.or.ddit.groupware.mailing.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.common.enumpkg.ServiceResult;
import kr.or.ddit.groupware.mailing.service.MailingService;
import kr.or.ddit.login.service.LoginService;
import kr.or.ddit.vo.PaginationInfo;
import kr.or.ddit.vo.groupware.MailAttachVO;
import kr.or.ddit.vo.groupware.MailVO;
import lombok.extern.slf4j.Slf4j;

/**
 * @author 작성자명
 * @since 2023. 11. 7.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet 
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일        수정자               수정내용
 * --------     --------    ----------------------
 * 2023. 11. 7.      박민주       최초작성
 * 2023. 11. 12.     박민주		SMTP, IMAP을 사용하여 전송, 메일 불러오기 확인
 * 2023. 11. 13.     박민주		어플리케이션 내에서 메일 발송 기능 구현 완료 (파일첨부 기능 빠뜨림)
 * 2023. 11. 14.     박민주		+ 파일 첨부 기능 추가
 * 2023. 11. 15.	 박민주		조회 메소드 추가
 * 2023. 12. 02.     박민주		중요메일함 목록 조회 추가
 * Copyright (c) 2023 by DDIT All right reserved
 * </pre>
 */
@Slf4j
@Controller
@RequestMapping("/mail")
public class mailingController {
	
	@Inject
	MailingService service;
	
	@Inject
	LoginService loginService;
	
	@GetMapping("mailForm")
	public String doGet() {
		return "mail/mailForm";
	}
	
	@Value("#{appInfo.mailFiles}")
	private Resource mailAtchFiles;
	
//	@GetMapping("/{mailCd}")
//	@ResponseBody                  // AJAX요청 받는  URL
//	public MailVO mailDetailView(@PathVariable("mailCd") String mailCd){
//		MailVO mail = service.retrieveMailDetail(mailCd);
//		log.info("반환된 mail =====> " + mail);
//		return mail;
//	}
	
	
	//받은 메일함 페이징 처리(inbox)
	@GetMapping("/receptionMail")
	@ResponseBody
	public Map<String, PaginationInfo<MailVO>> getrecievedMailList(
			@RequestParam(value="page", required = false, defaultValue = "1") int currentPage
			, Authentication authentication
			) {
		
		Map<String, Object> variousCondition = new HashMap<>();
		variousCondition.put("empCd", authentication.getName()); //로그인된 직원의 사번
		
		Map<String, PaginationInfo<MailVO>> map = new HashMap<>();
		PaginationInfo<MailVO> paging = new PaginationInfo<MailVO>(8,5);
		
		paging.setCurrentPage(currentPage);
		paging.setVariousCondition(variousCondition);
		List<MailVO> dataList = service.retrieveRecptionMailList(paging);
		paging.setDataList(dataList);
		
		map.put("paging", paging);
		
		service.retrieveRecptionMailList(paging);
		map.put("paging", paging);
		
		return map;
	}
	
	//보낸 메일함 페이징 처리 (sent)
	@GetMapping("/sentMail")
	@ResponseBody
	public Map<String, PaginationInfo<MailVO>> getSentMailList(
			@RequestParam(value="page", required = false, defaultValue = "1") int currentPage
			, Authentication authentication
			) {
		Map<String, Object> variousCondition = new HashMap<>();
		variousCondition.put("empCd", authentication.getName()); //로그인된 직원의 사번
		
		Map<String, PaginationInfo<MailVO>> map = new HashMap<>();
		PaginationInfo<MailVO> paging = new PaginationInfo<MailVO>(8,5);
		
		paging.setCurrentPage(currentPage);
		paging.setVariousCondition(variousCondition);
		List<MailVO> dataList = service.retrieveSentMailList(paging);
		paging.setDataList(dataList);
		
		map.put("paging", paging);
		log.info("보낸 메일함 페이징  ===> " + paging);
		
		return map;
	}
	
	//중요 메일함 페이징 처리 (starred)
	@GetMapping("/starredMail")
	@ResponseBody
	public Map<String, PaginationInfo<MailVO>> getStarredMailList(
			@RequestParam(value="page", required = false, defaultValue = "1") int currentPage
			, Authentication authentication
			) {
		Map<String, Object> variousCondition = new HashMap<>();
		variousCondition.put("empCd", authentication.getName()); //로그인된 직원의 사번
		
		Map<String, PaginationInfo<MailVO>> map = new HashMap<>();
		PaginationInfo<MailVO> paging = new PaginationInfo<MailVO>(8,5);
		
		paging.setCurrentPage(currentPage);
		paging.setVariousCondition(variousCondition);
		List<MailVO> dataList = service.retrieveImpotantMailList(paging);
		paging.setDataList(dataList);
		
		map.put("paging", paging);
		log.info("중요 메일함 페이징  ===> " + paging);
		
		return map;
	}
	
	//휴지통 처리 (trash) - 미정
	@GetMapping("/trash")
	@ResponseBody
	public Map<String, PaginationInfo<MailVO>> getTrashMailList(
			@RequestParam(value="page", required = false, defaultValue = "1") int currentPage
			, Authentication authentication
		  ){
		Map<String, Object> variousCondition = new HashMap<>();
		variousCondition.put("empCd", authentication.getName()); //로그인된 직원의 사번
		
		Map<String, PaginationInfo<MailVO>> map = new HashMap<>();
		PaginationInfo<MailVO> paging = new PaginationInfo<MailVO>(8,5);
		
		paging.setCurrentPage(currentPage);
		paging.setVariousCondition(variousCondition);
		
//		List<MailVO> dataList = service.retrieveSentMailList(paging);
//		paging.setDataList(dataList);
		
		map.put("paging", paging);
		log.info("보낸 메일함 페이징  ===> " + paging);
		
		return map;
	}
	
	@PostMapping
	@ResponseBody
	public Map<String,String> sendMail(MailVO mailVO) {
		String success = "NG";
		String message = "";
		ServiceResult sendMailResult = service.mailSend(mailVO);
		
		//메일 발송에 성공한 경우 => 테이블에 저장, 로컬에 파일 저장
		if(sendMailResult.equals(ServiceResult.OK)) {
			success = "OK";
			message = "메일을 발송하였습니다.";
			service.createMail(mailVO); //메시지 발송에 성공한 경우, 데이터 테이블에 저장한다.
			//mailVO 테이블에도 저장하고,
			
			List<MailAttachVO> attchList = mailVO.getAttachments();
			if(attchList!=null) { //첨부파일이 존재하는 경우
				for(MailAttachVO attch : attchList) {
					try {
						attch.saveTo(mailAtchFiles.getFile());
					} catch (IllegalStateException | IOException e) {
						throw new RuntimeException(e);
					}
				}
			}
		}else {
			message = "메일발송에 실패하였습니다.";
		}
		
		Map<String,String> mjResult = new HashMap<String, String>();
		
		mjResult.put("status", success);
		mjResult.put("message", message);
				
		return mjResult;
	}
	
	@GetMapping("/important")
	public Map<String, Object> getImportantMailList(
				Authentication authentication
			) {
		//받은메일인지 보낸메일인지 구분 필요!
		//그러려면, mailType을 받아야함? --> 필요없을듯@!!!
		String empCd = authentication.getName(); //로그인 중인 유저의 정보 ==> 얘도 쿼리에 넘겨야함
		
		Map<String, Object> resultMap =  new HashMap<>();
		
		/* 진행중
//		List<MailVO> importantMailList = service.selectImportantMailList();
//		resultMap.put("mailList", importantMailList);
//		resultMap.put(empCd, importantMailList);
		-
		*/
		
		//로그인된 유저 정보를 가지고
		//mailTB 와 mailRecption을 select
		//두개 조인해서 mailTb 에서 내가 발송자인 메일, mailRecptioVO에서 내가 수신자인 메일을 모두 가져옴!
		
		//if(mailVO.getMailSender가 나라면)==> 발신메일로 표시 --> 이건 뭐,, 스트링으로 맵에 담아가기? (맵은 string, object 타입)
//		return 맵을 반환//
		return null;
	}
	
	
	@PutMapping("/important/{emailCd}")
	@ResponseBody
	public Map<String,String> important(
			@PathVariable("emailCd") String mailCd,
			  @RequestBody Map<String, String> requestBody
			){
		 String mailType = requestBody.get("mailBoxType");
		String success = "FAIL";
		if(service.toggleImportant(mailCd, mailType)>0) {
			success = "OK";
		}
		Map<String,String> mjResult = new HashMap<String, String>();
		mjResult.put("status", success);
		return mjResult; 
	}
}
